

from typing import Tuple
from pathlib import Path

import torch
import trimesh

from torch.utils.data import Dataset


class SyntheticDefectData(Dataset):
    """Synthetic dataset generated by diffusion model for defect detection."""
    def __init__(self, root: str = "./synthetic_data"):
        super(SyntheticDefectData, self).__init__()
        self.root = root
        self.ply_paths = list(Path(root).glob("*.ply"))
        
    def __len__(self) -> int:
        return len(self.ply_paths)
    
    def __getitem__(self, idx: int) -> Tuple[torch.Tensor, int]:
        ply_path = self.ply_paths[idx]
        if "defect" in ply_path.name.lower():
            label = 1
        else:
            label = 0
        # load point cloud
        point_cloud = trimesh.load(ply_path, file_type="ply").vertices
        # convert to tensor
        point_cloud = torch.tensor(point_cloud, dtype=torch.float32)
        return point_cloud, label
