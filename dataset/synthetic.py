

from typing import Tuple
from pathlib import Path

import torch
import trimesh

from torch.utils.data import Dataset

from .transform import remove_points


class SyntheticDefectData(Dataset):
    """Synthetic dataset generated by diffusion model for defect detection."""
    def __init__(
        self,
        root: str = "./synthetic_data",
        defect_type: str = "removal",
        max_points: int = 1024
    ):
        super(SyntheticDefectData, self).__init__()
        self.max_points = max_points
        self.defect_type = defect_type
        self.root = root
        self.ply_paths = list(Path(root).glob(f"*_{defect_type}_defect_*.ply"))
        
    def __len__(self) -> int:
        return len(self.ply_paths)
    
    def __getitem__(self, idx: int) -> Tuple[torch.Tensor, int]:
        ply_path = self.ply_paths[idx]
        if "defect" in ply_path.name.lower():
            label = 1
        else:
            label = 0
        # load point cloud
        point_cloud = trimesh.load(ply_path, file_type="ply").vertices
        # convert to tensor
        point_cloud = torch.tensor(point_cloud, dtype=torch.float32)
        num_points = point_cloud.shape[0]
        if num_points > self.max_points:
            num_remove = max(0, num_points - self.max_points)
            point_cloud = remove_points(
                point_cloud=point_cloud, num_remove=num_remove
            )
        return point_cloud, label
